<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

    <!-- 引入jdbc配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--本示例采用DBCP连接池。 连接池配置如下 -->
    <bean id="master" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${jdbc_driverClassName}"/>
        <property name="url" value="${jdbc_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
    </bean>

    <bean id="slave" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="${jdbc_driverClassName}"/>
        <property name="url" value="${jdbc_slave_url}"/>
        <property name="username" value="${jdbc_username}"/>
        <property name="password" value="${jdbc_password}"/>
    </bean>

    <!--<bean id="dataSource" class="com.wind.springdemo.datasource.ChooseDataSource">-->
        <!--<property name="targetDataSources">-->
            <!--<map key-type="java.lang.String">-->
                <!--&lt;!&ndash; write &ndash;&gt;-->
                <!--<entry key="write" value-ref="master"/>-->
                <!--&lt;!&ndash; read &ndash;&gt;-->
                <!--<entry key="read" value-ref="slave"/>-->
            <!--</map>-->

        <!--</property>-->
        <!--<property name="defaultTargetDataSource" ref="master"/>-->
    <!--</bean>-->

    <bean id="dataSource" class="com.wind.springdemo.datasource.DynamicDataSource">
        <property name="master" ref="master" />
        <property name="slaves">
            <list>
                <ref bean="slave"/>
            </list>
        </property>
    </bean>

    <context:annotation-config />

    <!--enale component scanning (beware that this does not enable mapper scanning!)-->
    <context:component-scan base-package="com.wind.springdemo.aspect" />
    <context:component-scan base-package="com.wind.springdemo.service">
        <context:include-filter type="annotation"
                                expression="org.springframework.stereotype.Component" />
    </context:component-scan>


    <!-- enable transaction demarcation with annotations -->
    <tx:annotation-driven />

    <!-- mybatis文件配置，扫描所有mapper文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
          p:dataSource-ref="dataSource"
          p:mapperLocations="classpath*:com/wind/springdemo/dao/*.xml"/>
    <!-- configLocation为mybatis属性	mapperLocations为所有mapper -->

    <!-- spring与mybatis整合配置，扫描所有dao ,生成与DAO类相同名字的bean（除了首字母小写）-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:basePackage="com.wind.springdemo.dao" p:sqlSessionFactoryBeanName="sqlSessionFactory"/>

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>

    <bean id="dynamicSqlSessionTemplate" class="com.wind.springdemo.datasource.DynamicSqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionTemplate" />
    </bean>


    <!-- 对数据源进行事务管理 -->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"-->
    <!--p:dataSource-ref="dataSource"/>-->

    <!-- 定义单个jdbc数据源的事务管理器 -->
    <bean id="transactionManager"
          class="com.wind.springdemo.datasource.DynamicDataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 以 @Transactional 标注来定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager"
                          proxy-target-class="true" />

    <!-- 激活自动代理功能 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 配置事务的传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="delete*" propagation="REQUIRED" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="proc*" propagation="REQUIRED" read-only="false"
                       rollback-for="Exception" />
            <tx:method name="select*" read-only="true" />
            <tx:method name="get*" read-only="true" />
            <tx:method name="find*" read-only="true" />
            <tx:method name="*" read-only="false" />
            <!-- <tx:method name="*" read-only="true" /> -->
        </tx:attributes>
    </tx:advice>
    <!-- 那些类的哪些方法参与事务 -->
    <aop:config>
        <aop:pointcut id="allManagerMethod" expression="execution(* com.wind.springdemo.service..*(..))"/>
        <aop:advisor pointcut-ref="allManagerMethod" advice-ref="txAdvice"/>
    </aop:config>


    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
        <property name="cacheManager">

            <bean class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
                <property name="configLocation" value="classpath:ehcache-config.xml"/>
            </bean>
        </property>
    </bean>

    <cache:annotation-driven />


</beans>